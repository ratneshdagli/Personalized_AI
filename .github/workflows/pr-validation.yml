name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Validate PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          build
          ci
          chore
          revert
    
    - name: Check for breaking changes
      run: |
        if [[ "${{ github.event.pull_request.title }}" =~ \[breaking\] ]]; then
          echo "⚠️ Breaking changes detected in PR title"
          echo "Please ensure this is intentional and update version accordingly"
        fi
    
    - name: Validate commit messages
      run: |
        # Check if commit messages follow conventional commit format
        git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | while read commit; do
          if [[ ! "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?: ]]; then
            echo "❌ Invalid commit message format: $commit"
            echo "Please use conventional commit format: type(scope): description"
            exit 1
          fi
        done
    
    - name: Check file changes
      run: |
        echo "Files changed in this PR:"
        git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}
        
        # Check for sensitive files
        if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E "\.(env|key|secret|pem|p12)$"; then
          echo "❌ Sensitive files detected in PR"
          exit 1
        fi
    
    - name: Run quick tests
      run: |
        # Quick syntax check for Python
        cd flutter_backend
        python -m py_compile main.py || echo "Python syntax check failed"
        
        # Quick syntax check for Dart
        cd ../flutter_application_1
        flutter analyze --no-fatal-infos || echo "Dart analysis failed"

